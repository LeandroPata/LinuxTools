#!/usr/bin/env bash

# Package cache cleaning implementation from @albertored11

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

if [ $EUID = 0 ]; then
  USER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
else
  USER_HOME=$HOME
  echo -e "\n${RED}Some operations require root permission!${NC}"
fi

if [[ $1 == '' ]]; then
  DEST_FOLDER=$(pwd)
else
  DEST_FOLDER=$1
fi

DEST_FILE="orphanedPackages.txt"

cachedir="$USER_HOME/.cache/yay"
removed="$(comm -23 <(basename -a $(find $cachedir -mindepth 1 -maxdepth 1 -type d) | sort) <(pacman -Qqm) | xargs -r printf "$cachedir/%s\n")"

echo -e "\n${BLUE}Creating $DEST_FOLDER if it doesn't exist${NC}"
mkdir -pv "$DEST_FOLDER"
chown "$SUDO_USER":"$SUDO_USER" "$DEST_FOLDER"

echo -e "${BLUE}"
read -n 1 -rp "Clean journal? [Y/n] " prompt

# Convert input to lowercase
prompt=${prompt,,}

#Add extra \n if not empty due to "enter" inserting a newline
if [[ -n "$prompt" ]]; then
  printf "\n"
fi

if [ "$prompt" == y ] || [ -z "$prompt" ]; then
  # Clean journal entries older than 4 weeks
  echo -e "\n${BLUE}Cleaning journal${NC}\n"
  journalctl --vacuum-time=4weeks
  echo -e "\n${GREEN}Finished cleaning journal\n"
fi

echo -e "${BLUE}"
read -n 1 -rp "Remove uninstalled packages files? [Y/n] " prompt

# Convert input to lowercase
prompt=${prompt,,}

#Add extra \n if not empty due to "enter" inserting a newline
if [[ -n "$prompt" ]]; then
  printf "\n"
fi

if [ "$prompt" == y ] || [ -z "$prompt" ]; then
  # Remove uninstalled pacman packages
  echo -e "\n${BLUE}Removing uninstalled pacman packages${NC}\n"
  paccache -ruk0
  echo -e "\n${GREEN}Removed uninstalled pacman packages\n"

  # Remove yay cache for foreign packages that are not installed anymore
  echo -e "\n${BLUE}Removing uninstalled foreign packages${NC}\n"
  rm -rf $removed
  echo -e "${GREEN}Removed uninstalled foreign packages\n"
fi

echo -e "${BLUE}"
read -n 1 -rp "Clean pacman cache? [Y/n] " prompt

# Convert input to lowercase
prompt=${prompt,,}

#Add extra \n if not empty due to "enter" inserting a newline
if [[ -n "$prompt" ]]; then
  printf "\n"
fi

if [ "$prompt" == y ] || [ -z "$prompt" ]; then
  # Clean pacman cache
  echo -e "\n${BLUE}Cleaning packages cache${NC}\n"

  pkgcache="$(find $cachedir -mindepth 1 -maxdepth 1 -type d | xargs -r printf "-c %s\n")"

  for pkgdir in "$cachedir"/*/; do

    pkgname=$(basename "$pkgdir")

    # Remove untracked files (e. g. source/build files) excepting package files and main source files for installed version if non-git package
    if [[ ! "$pkgname" =~ ^.*-git$ ]]; then

      pkgver="$(pacman -Q $pkgname | cut -d ' ' -f2 | cut -d '-' -f1 | cut -d ':' -f2)"

      cd "$pkgdir"
      rm -f $(git ls-files --others | grep -v -e '^.*\.pkg\.tar.*$' -e '^.*/$' -e "^.*$pkgver.*$" | xargs -r printf "$pkgdir/%s\n")

    fi

    rm -rf "$pkgdir"/src/

  done

  # Remove everything for uninstalled foreign packages and uninstalled native packages, keep two latest versions for installed packages
  paccache -ruk0 $pkgcache
  paccache -ruk0
  paccache -rk2
  echo -e "\n${GREEN}Finished cleaning packages cache\n"
fi

echo -e "${BLUE}"
read -n 1 -rp "Remove orphan packages? [Y/n] " prompt

# Convert input to lowercase
prompt=${prompt,,}

#Add extra \n if not empty due to "enter" inserting a newline
if [[ -n "$prompt" ]]; then
  printf "\n"
fi

if [ "$prompt" == y ] || [ -z "$prompt" ]; then
  # Remove orphan packages
  echo -e "${BLUE}Removing orphan packages\n${RED}CHECK ALL PACKAGES AND EXPLICITLY INSTALL TO KEEP THEM${NC}\n"
  pacman -Qdtq >"$DEST_FOLDER"/"$DEST_FILE"
  chown "$SUDO_USER":"$SUDO_USER" "$DEST_FOLDER"/"$DEST_FILE"
  echo -e "\n${GREEN}Saved orphan packages to file${NC}\n"
  pacman -Rns $(pacman -Qdtq)
  echo -e "\n${GREEN}Finished cleaning"
fi

printf "${NC}"
